// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication (Admin only role in MVP)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  roleId    String   @map("role_id")
  role      Role     @relation(fields: [roleId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  description String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users     User[]

  @@map("roles")
}

// Materials (raw ingredients) with expiry and low-stock threshold
model Material {
  id                String   @id @default(uuid())
  name              String
  quantity          Float
  unit              String
  expiryDate        DateTime
  lowStockThreshold Float
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  bomItems          BOMItem[]

  @@map("materials")
}

// Finished product
model Product {
  id         String      @id @default(uuid())
  name       String
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  bomItems   BOMItem[]
  orderItems OrderItem[]

  @@map("products")
}

// Bill of Materials items: quantity of a material per product portion
model BOMItem {
  id                 String   @id @default(uuid())
  productId          String   @map("product_id")
  product            Product  @relation(fields: [productId], references: [id])
  materialId         String   @map("material_id")
  material           Material @relation(fields: [materialId], references: [id])
  quantityPerPortion Float    @map("quantity_per_portion")

  @@unique([productId, materialId])
  @@map("bom_items")
}

// Orders placed for finished products
model Order {
  id        String      @id @default(uuid())
  orderDate DateTime    @map("order_date")
  status    String      @default("CONFIRMED")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id                  String   @id @default(uuid())
  orderId             String   @map("order_id")
  order               Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId           String?  @map("product_id")
  product             Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productNameSnapshot String   @map("product_name_snapshot")
  quantity            Int
  createdAt           DateTime @default(now()) @map("created_at")

  @@map("order_items")
}
