{
  "documentType": "Backend Technical Design Document (TDD)",
  "productName": "Nexus WMS Core",
  "version": "1.0",
  "author": "Backend Team Lead",
  "status": "Revised",
  "lastUpdated": "2025-08-06T13:25:34Z",
  "overview": {
    "purpose": "This document provides the detailed technical specifications for the backend services, specifically for a Node.js, Express, and TypeScript stack.",
    "techStack": {
      "runtime": "Node.js",
      "framework": "Express.js",
      "language": "TypeScript",
      "orm": "Prisma",
      "validation": "Zod"
    }
  },
  "databaseSchema": {
    "description": "PostgreSQL schema design remains the same. Prisma will be used to manage schema migrations (`prisma migrate`) and generate a type-safe client.",
    "tables": ["users", "roles", "products", "bin_locations", "inventory_levels", "inventory_adjustments", "picklists", "picklist_items"]
  },
  "apiEndpointDefinitions": {
    "baseUrl": "/api/v1",
    "authentication": "JWT-based authentication middleware will protect all required routes.",
    "epic": "Core Inventory Management",
    "endpoints": [
      {
        "storyId": "INV-001",
        "description": "Get a paginated list of all products and their stock levels.",
        "endpoint": "GET /products",
        "requiredRole": "Warehouse Manager",
        "nodeExpressTsImplementationNotes": "Create a `product.controller.ts`. Use Prisma Client's `findMany` with `where` for searching (using `contains` and `mode: 'insensitive'`) and `skip`/`take` for pagination. The total count should be fetched using `count()` for pagination metadata."
      },
      {
        "storyId": "INV-002",
        "description": "Perform a manual inventory adjustment for a product in a specific bin.",
        "endpoint": "POST /inventory/adjustments",
        "requiredRole": "Warehouse Manager",
        "nodeExpressTsImplementationNotes": "**CRITICAL**: Use Prisma's interactive transactions API (`prisma.$transaction`) to ensure atomicity. 1) Create a Zod schema to validate the request body. 2) The transaction will contain a `prisma.inventoryAdjustment.create()` and a `prisma.inventoryLevel.upsert()`. The `upsert` operation will create the record if it doesn't exist or update it if it does."
      }
    ],
    "epic": "Outbound Logistics (Picking)",
    "endpoints": [
      {
        "storyId": "OUT-001",
        "description": "Get the next available picklist assigned to the picker.",
        "endpoint": "GET /picklists/assigned/next",
        "requiredRole": "Picker",
        "nodeExpressTsImplementationNotes": "In `picklist.controller.ts`, use `prisma.picklist.findFirst` to get a picklist for the user (from JWT payload) with status 'PENDING'. Use Prisma's `include` option to eager-load `picklistItems` and their related `product` and `sourceBinLocation`. Sort the included items array in memory by `binLocation.code` before sending the response."
      },
      {
        "storyId": "OUT-002",
        "description": "Verify a pick action by scanning product and bin barcodes.",
        "endpoint": "POST /picklists/verify-pick",
        "requiredRole": "Picker",
        "nodeExpressTsImplementationNotes": "Create a `verifyPick` controller. Use a Zod schema for the request body (`picklistItemId`, `scannedProductBarcode`, `scannedBinBarcode`). Fetch the `picklistItem` with its relations. Compare barcodes. If they match, use a `prisma.$transaction` to update the `picklistItem` (`is_picked = true`) and check if all other items in the parent `picklist` are also picked. If so, update the `picklist` status to 'COMPLETED'."
      }
    ]
  }
}